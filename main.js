/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const VOICENOTES_API_URL = 'https://api.voicenotes.com/api';
class VoiceNotesApi {
    constructor(options) {
        if (options.token) {
            this.token = options.token;
        }
    }
    setToken(token) {
        this.token = token;
    }
    login(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.username && options.password) {
                const loginUrl = `${VOICENOTES_API_URL}/auth/login`;
                console.log(`loginUrl: ${loginUrl}`);
                const response = yield obsidian.requestUrl({
                    url: loginUrl,
                    method: 'POST',
                    contentType: 'application/json',
                    body: JSON.stringify({
                        email: options.username,
                        password: options.password
                    })
                });
                if (response.status === 200) {
                    this.token = response.json.authorisation.token;
                    return this.token;
                }
                return null;
            }
            return null;
        });
    }
    getSignedUrl(recordingId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.token) {
                const data = yield obsidian.requestUrl({
                    url: `${VOICENOTES_API_URL}/recordings/${recordingId}/signed-url`, headers: {
                        'Authorization': `Bearer ${this.token}`
                    }
                });
                return data.json;
            }
            return null;
        });
    }
    downloadFile(fs, url, outputLocationPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield obsidian.requestUrl({
                url,
            });
            const buffer = Buffer.from(response.arrayBuffer);
            yield fs.writeBinary(outputLocationPath, buffer);
        });
    }
    deleteRecording(recordingId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.token) {
                const data = yield obsidian.requestUrl({
                    url: `${VOICENOTES_API_URL}/recordings/${recordingId}`, headers: {
                        'Authorization': `Bearer ${this.token}`
                    },
                    method: 'DELETE'
                });
                return data.status === 200;
            }
            return false;
        });
    }
    getRecordingsFromLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.token) {
                const data = yield obsidian.requestUrl({
                    url: link, headers: {
                        'Authorization': `Bearer ${this.token}`
                    }
                });
                return data.json;
            }
            return null;
        });
    }
    getRecordings() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.token) {
                const data = yield obsidian.requestUrl({
                    url: `${VOICENOTES_API_URL}/recordings`, headers: {
                        'Authorization': `Bearer ${this.token}`
                    }
                });
                return data.json;
            }
            return null;
        });
    }
    getUserInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.token) {
                const data = yield obsidian.requestUrl({
                    url: `${VOICENOTES_API_URL}/auth/me`, headers: {
                        'Authorization': `Bearer ${this.token}`
                    }
                });
                return data.json;
            }
            return null;
        });
    }
}

function capitalizeFirstLetter(word) {
    return word[0].toUpperCase() + word.slice(1);
}
function isToday(date) {
    return obsidian.moment(date).isSame(obsidian.moment(), 'day');
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var build = {};

function isHighSurrogate$1(codePoint) {
  return codePoint >= 0xd800 && codePoint <= 0xdbff;
}

function isLowSurrogate$1(codePoint) {
  return codePoint >= 0xdc00 && codePoint <= 0xdfff;
}

// Truncate string by size in bytes
var truncate$1 = function truncate(getLength, string, byteLength) {
  if (typeof string !== "string") {
    throw new Error("Input must be string");
  }

  var charLength = string.length;
  var curByteLength = 0;
  var codePoint;
  var segment;

  for (var i = 0; i < charLength; i += 1) {
    codePoint = string.charCodeAt(i);
    segment = string[i];

    if (isHighSurrogate$1(codePoint) && isLowSurrogate$1(string.charCodeAt(i + 1))) {
      i += 1;
      segment += string[i];
    }

    curByteLength += getLength(segment);

    if (curByteLength === byteLength) {
      return string.slice(0, i + 1);
    }
    else if (curByteLength > byteLength) {
      return string.slice(0, i - segment.length + 1);
    }
  }

  return string;
};

function isHighSurrogate(codePoint) {
  return codePoint >= 0xd800 && codePoint <= 0xdbff;
}

function isLowSurrogate(codePoint) {
  return codePoint >= 0xdc00 && codePoint <= 0xdfff;
}

// Truncate string by size in bytes
var browser$1 = function getByteLength(string) {
  if (typeof string !== "string") {
    throw new Error("Input must be string");
  }

  var charLength = string.length;
  var byteLength = 0;
  var codePoint = null;
  var prevCodePoint = null;
  for (var i = 0; i < charLength; i++) {
    codePoint = string.charCodeAt(i);
    // handle 4-byte non-BMP chars
    // low surrogate
    if (isLowSurrogate(codePoint)) {
      // when parsing previous hi-surrogate, 3 is added to byteLength
      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {
        byteLength += 1;
      }
      else {
        byteLength += 3;
      }
    }
    else if (codePoint <= 0x7f ) {
      byteLength += 1;
    }
    else if (codePoint >= 0x80 && codePoint <= 0x7ff) {
      byteLength += 2;
    }
    else if (codePoint >= 0x800 && codePoint <= 0xffff) {
      byteLength += 3;
    }
    prevCodePoint = codePoint;
  }

  return byteLength;
};

var truncate = truncate$1;
var getLength = browser$1;
var browser = truncate.bind(null, getLength);

var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(build, "__esModule", { value: true });
const truncate_utf8_bytes_1 = __importDefault(browser);
/**
 * Replaces characters in strings that are illegal/unsafe for filenames.
 * Unsafe characters are either removed or replaced by a substitute set
 * in the optional `options` object.
 *
 * Illegal Characters on Various Operating Systems
 * / ? < > \ : * | "
 * https://kb.acronis.com/content/39790
 *
 * Unicode Control codes
 * C0 0x00-0x1f & C1 (0x80-0x9f)
 * http://en.wikipedia.org/wiki/C0_and_C1_control_codes
 *
 * Reserved filenames on Unix-based systems (".", "..")
 * Reserved filenames in Windows ("CON", "PRN", "AUX", "NUL", "COM1",
 * "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
 * "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", and
 * "LPT9") case-insesitively and with or without filename extensions.
 *
 * Capped at 255 characters in length.
 * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs
 *
 * @param  {String} input   Original filename
 * @param  {Object} options {replacement: String}
 * @return {String}         Sanitized filename
 */
const illegalRe = /[\/\?<>\\:\*\|":]/g;
/* tslint:disable-next-line:no-control-regex */
const controlRe = /[\x00-\x1f\x80-\x9f]/g;
const reservedRe = /^\.+$/;
const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
const windowsTrailingRe = /[\. ]+$/;
function replace(input, replacement) {
    const sanitized = input
        .replace(illegalRe, replacement)
        .replace(controlRe, replacement)
        .replace(reservedRe, replacement)
        .replace(windowsReservedRe, replacement)
        .replace(windowsTrailingRe, replacement);
    return truncate_utf8_bytes_1.default(sanitized, 255);
}
function sanitize(input, options) {
    const replacement = (options && options.replacement) || "";
    const output = replace(input, replacement);
    if (replacement === "") {
        return output;
    }
    return replace(output, "");
}
var sanitize_1 = build.sanitize = sanitize;

class VoiceNotesSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.vnApi = new VoiceNotesApi({});
    }
    display() {
        return __awaiter(this, void 0, void 0, function* () {
            let { containerEl } = this;
            containerEl.empty();
            if (!this.plugin.settings.token) {
                new obsidian.Setting(containerEl)
                    .setName('Username')
                    .addText(text => text
                    .setPlaceholder('Email address')
                    .setValue(this.plugin.settings.username)
                    .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.username = value;
                    yield this.plugin.saveSettings();
                })));
                new obsidian.Setting(containerEl)
                    .setName('Password')
                    .addText(text => {
                    text
                        .setPlaceholder('Password')
                        .setValue(this.plugin.settings.password)
                        .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                        this.password = value;
                        yield this.plugin.saveSettings();
                    }));
                    text.inputEl.type = 'password';
                    return text;
                });
                new obsidian.Setting(containerEl)
                    .addButton(button => button
                    .setButtonText("Login")
                    .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.token = yield this.vnApi.login({
                        username: this.plugin.settings.username,
                        password: this.password
                    });
                    this.plugin.settings.password = null;
                    if (this.plugin.settings.token) {
                        new obsidian.Notice("Login to voicenotes.com was successful");
                        yield this.plugin.saveSettings();
                        yield this.display();
                    }
                    else {
                        new obsidian.Notice("Login to voicenotes.com was unsuccessful");
                    }
                })));
                new obsidian.Setting(containerEl)
                    .setName('Auth Token')
                    .addText(text => text
                    .setPlaceholder('12345|abcdefghijklmnopqrstuvwxyz')
                    .setValue(this.plugin.settings.token)
                    .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.token = value;
                    yield this.plugin.saveSettings();
                })));
                new obsidian.Setting(containerEl)
                    .addButton(button => button
                    .setButtonText("Login with token")
                    .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                    this.vnApi.setToken(this.plugin.settings.token);
                    const response = yield this.vnApi.getUserInfo();
                    this.plugin.settings.password = null;
                    if (response) {
                        new obsidian.Notice("Login to voicenotes.com was successful");
                        yield this.plugin.saveSettings();
                        yield this.display();
                    }
                    else {
                        new obsidian.Notice("Login to voicenotes.com was unsuccessful");
                    }
                })));
            }
            if (this.plugin.settings.token) {
                this.vnApi.setToken(this.plugin.settings.token);
                const userInfo = yield this.vnApi.getUserInfo();
                new obsidian.Setting(containerEl)
                    .setName("Name")
                    .addText(text => text
                    .setPlaceholder(userInfo.name)
                    .setDisabled(true));
                new obsidian.Setting(containerEl)
                    .setName("Email")
                    .addText(text => text
                    .setPlaceholder(userInfo.email)
                    .setDisabled(true));
                new obsidian.Setting(containerEl)
                    .addButton(button => button
                    .setButtonText("Logout")
                    .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                    new obsidian.Notice("Logged out of voicenotes.com");
                    this.plugin.settings.token = null;
                    this.plugin.settings.password = null;
                    this.password = null;
                    yield this.plugin.saveSettings();
                    yield this.display();
                })));
                new obsidian.Setting(containerEl)
                    .setName("Force Sync")
                    .setDesc("Manual synchronization -- only use the overwrite manual sync if you're ok with overwriting already synced notes")
                    .addButton(button => button
                    .setButtonText("Manual sync")
                    .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                    new obsidian.Notice("Performing manual synchronization without overwriting existing work.");
                    yield this.plugin.sync();
                    new obsidian.Notice("Manual synchronization has completed.");
                })))
                    .addButton(button => button
                    .setButtonText("Manual sync (overwrite)")
                    .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                    // Upon a manual sync we are going to forget about existing data so we can sync all again
                    new obsidian.Notice("Performing manual synchronization and overwriting all notes.");
                    this.plugin.syncedRecordingIds = [];
                    yield this.plugin.sync(true);
                    new obsidian.Notice("Manual synchronization with overwrite has completed.");
                })));
            }
            new obsidian.Setting(containerEl)
                .setName("Automatic sync every")
                .setDesc("Number of minutes between syncing with VoiceNotes.com servers (uncheck to sync manually)")
                .addText(text => {
                text
                    .setDisabled(!this.plugin.settings.automaticSync)
                    .setPlaceholder("30")
                    .setValue(`${this.plugin.settings.syncTimeout}`)
                    .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.syncTimeout = Number(value);
                    yield this.plugin.saveSettings();
                }));
                text.inputEl.type = 'number';
                return text;
            })
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.automaticSync)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.automaticSync = value;
                // If we've turned on automatic sync again, let's re-sync right away
                if (value) {
                    yield this.plugin.sync(false);
                }
                yield this.plugin.saveSettings();
                yield this.display();
            })));
            new obsidian.Setting(containerEl)
                .setName("Sync directory")
                .setDesc("Directory to sync voice notes")
                .addText(text => text
                .setPlaceholder("voicenotes")
                .setValue(`${this.plugin.settings.syncDirectory}`)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.syncDirectory = value;
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName("Add a tag to todos")
                .setDesc("When syncing a note add an optional tag to the todo")
                .addText(text => text
                .setPlaceholder("TODO")
                .setValue(this.plugin.settings.todoTag)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.todoTag = value;
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName("Download audio")
                .setDesc("Store and download the audio associated with the transcript")
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.downloadAudio)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.downloadAudio = Boolean(value);
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName("To-do list retention")
                .setDesc("Does not synchronise tasks that have already been synchronised to avoid status deletion")
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.keepTodos)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.keepTodos = Boolean(value);
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName("Prepend Date to Note Title")
                .setDesc("Adding the dates to the file names of all synced notes")
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.prependDateToTitle)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.prependDateToTitle = value;
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName("Delete synced recordings")
                .setDesc("DESTRUCTIVE action which after syncing the note locally will delete it from the voicenotes.com server.")
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.deleteSynced)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.deleteSynced = value;
                if (!value) {
                    this.plugin.settings.reallyDeleteSynced = false;
                }
                yield this.plugin.saveSettings();
                yield this.display();
            })));
            if (this.plugin.settings.deleteSynced) {
                new obsidian.Setting(containerEl)
                    .setName("REALLY delete synced recordings")
                    .setDesc("We want you to be sufficiently clear that this will delete anything on voicenotes.com")
                    .addToggle(toggle => toggle
                    .setValue(this.plugin.settings.reallyDeleteSynced)
                    .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.reallyDeleteSynced = Boolean(value);
                    yield this.plugin.saveSettings();
                })));
            }
        });
    }
}

const DEFAULT_SETTINGS = {
    automaticSync: true,
    syncTimeout: 60,
    downloadAudio: false,
    keepTodos: true,
    syncDirectory: "voicenotes",
    deleteSynced: false,
    reallyDeleteSynced: false,
    todoTag: "",
    prependDateToTitle: false,
    prependDateFormat: "YYYY-MM-DD"
};
class VoiceNotesPlugin extends obsidian.Plugin {
    constructor(app, manifest) {
        super(app, manifest);
        this.timeSinceSync = 0;
        this.ONE_SECOND = 1000;
        this.fs = app.vault.adapter;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            window.clearInterval(this.syncInterval);
            yield this.loadSettings();
            this.addSettingTab(new VoiceNotesSettingTab(this.app, this));
            this.addCommand({
                id: 'manual-sync-voicenotes',
                name: 'Manual Sync Voicenotes',
                callback: () => __awaiter(this, void 0, void 0, function* () { return yield this.sync(false); })
            });
            this.addCommand({
                id: 'insert-voicenotes-from-today',
                name: 'Insert Today\'s Voicenotes',
                editorCallback: (editor) => __awaiter(this, void 0, void 0, function* () {
                    if (!this.settings.token) {
                        new obsidian.Notice('No access available, please login in plugin settings');
                        return;
                    }
                    const todaysRecordings = yield this.getTodaysSyncedRecordings();
                    if (todaysRecordings.length === 0) {
                        new obsidian.Notice("No recordings from today found");
                        return;
                    }
                    let listOfToday = todaysRecordings.map(filename => `- [[${filename}]]`).join('\n');
                    editor.replaceSelection(listOfToday);
                })
            });
            this.registerEvent(this.app.metadataCache.on("deleted", (deletedFile, prevCache) => {
                var _a, _b;
                if ((_a = prevCache.frontmatter) === null || _a === void 0 ? void 0 : _a.recording_id) {
                    this.syncedRecordingIds.remove((_b = prevCache.frontmatter) === null || _b === void 0 ? void 0 : _b.recording_id);
                }
            }));
            this.syncedRecordingIds = yield this.getSyncedRecordingIds();
            yield this.sync(this.syncedRecordingIds.length === 0);
        });
    }
    onunload() {
        this.syncedRecordingIds = [];
        window.clearInterval(this.syncInterval);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    getRecordingIdFromFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return (_b = (_a = this.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter) === null || _b === void 0 ? void 0 : _b['recording_id'];
        });
    }
    isRecordingFromToday(file) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return isToday(yield ((_b = (_a = this.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter) === null || _b === void 0 ? void 0 : _b['created_at']));
        });
    }
    sanitizedTitle(title, created_at) {
        let generatedTitle = this.settings.prependDateToTitle ? `${obsidian.moment(created_at).format(this.settings.prependDateFormat)} ${title}` : title;
        return sanitize_1(generatedTitle);
    }
    /**
     * Return the recording IDs that we've already synced
     */
    getSyncedRecordingIds() {
        return __awaiter(this, void 0, void 0, function* () {
            const { vault } = this.app;
            const markdownFiles = vault.getMarkdownFiles().filter(file => file.path.startsWith(this.settings.syncDirectory));
            return (yield Promise.all(markdownFiles.map((file) => __awaiter(this, void 0, void 0, function* () { return this.getRecordingIdFromFile(file); })))).filter(recordingId => recordingId !== undefined);
        });
    }
    getTodaysSyncedRecordings() {
        return __awaiter(this, void 0, void 0, function* () {
            const { vault } = this.app;
            const markdownFiles = vault.getMarkdownFiles().filter(file => file.path.startsWith(this.settings.syncDirectory));
            return (yield Promise.all(markdownFiles.map((file) => __awaiter(this, void 0, void 0, function* () { return (yield this.isRecordingFromToday(file)) ? file.basename : undefined; })))).filter(filename => filename !== undefined);
        });
    }
    sync() {
        return __awaiter(this, arguments, void 0, function* (fullSync = false) {
            console.debug(`Sync running full? ${fullSync}`);
            this.vnApi = new VoiceNotesApi({});
            this.vnApi.token = this.settings.token;
            const voiceNotesDir = obsidian.normalizePath(this.settings.syncDirectory);
            if (!(yield this.app.vault.adapter.exists(voiceNotesDir))) {
                new obsidian.Notice("Creating sync directory for Voice Notes Sync plugin");
                yield this.app.vault.createFolder(voiceNotesDir);
            }
            let recordings = yield this.vnApi.getRecordings();
            if (fullSync && recordings.links.next) {
                let nextPage = recordings.links.next;
                do {
                    console.debug(`Performing a full sync ${nextPage}`);
                    let moreRecordings = yield this.vnApi.getRecordingsFromLink(nextPage);
                    recordings.data.push(...moreRecordings.data);
                    nextPage = moreRecordings.links.next;
                } while (nextPage);
            }
            // console.dir(recordings)
            if (recordings) {
                new obsidian.Notice(`Syncing latest Voicenotes`);
                for (const recording of recordings.data) {
                    if (!recording.title) {
                        new obsidian.Notice(`Unable to grab voice recording with id: ${recording.id}`);
                        continue;
                    }
                    // If we've already synced it locally let's not do it again
                    if (this.syncedRecordingIds.includes(recording.recording_id)) {
                        continue;
                    }
                    const title = this.sanitizedTitle(recording.title, recording.created_at);
                    const recordingPath = obsidian.normalizePath(`${voiceNotesDir}/${title}.md`);
                    // Read file if it exists
                    let existingContent = "";
                    if (yield this.app.vault.adapter.exists(recordingPath)) {
                        existingContent = yield this.app.vault.read(this.app.vault.getFileByPath(recordingPath));
                    }
                    let note = '---\n';
                    note += `recording_id: ${recording.recording_id}\n`;
                    note += `duration: ${recording.duration}\n`;
                    note += `created_at: ${recording.created_at}\n`;
                    note += `updated_at: ${recording.updated_at}\n`;
                    if (recording.tags.length > 0) {
                        note += `tags: ${recording.tags.map(tag => tag.name).join(",")}\n`;
                    }
                    note += '---\n';
                    if (this.settings.downloadAudio) {
                        const audioPath = obsidian.normalizePath(`${voiceNotesDir}/audio`);
                        if (!(yield this.app.vault.adapter.exists(audioPath))) {
                            yield this.app.vault.createFolder(audioPath);
                        }
                        const outputLocationPath = obsidian.normalizePath(`${audioPath}/${recording.recording_id}.mp3`);
                        if (!(yield this.app.vault.adapter.exists(outputLocationPath))) {
                            // Get unique audio download URL and download file to disk
                            const signedUrl = yield this.vnApi.getSignedUrl(recording.recording_id);
                            yield this.vnApi.downloadFile(this.fs, signedUrl.url, outputLocationPath);
                        }
                        note += `![[${recording.recording_id}.mp3]]\n\n`;
                        note += '# Transcript\n';
                    }
                    note += recording.transcript;
                    note += '\n';
                    for (const creation of recording.creations) {
                        note += `## ${capitalizeFirstLetter(creation.type)}\n`;
                        if (creation.type === 'email') {
                            const creationData = creation.content.data;
                            note += `**Subject:** ${creationData.subject}\n\n`;
                            note += `${creationData.body}\n`;
                        }
                        else if (creation.type === 'todo') {
                            if (existingContent.includes("## Todo") && this.settings.keepTodos) {
                                const todos = existingContent.match(/## Todo\s*([\s\S]*?)(?=\n##|$)/)[1].trim() + '\n';
                                note += todos;
                            }
                            else {
                                const creationData = creation.content.data;
                                if (Array.isArray(creationData)) {
                                    note += creationData.map(data => `- [ ] ${data}${this.settings.todoTag ? ' #' + this.settings.todoTag : ''}`).join('\n');
                                }
                            }
                        }
                        else if (creation.type !== 'tweet' && creation.type !== 'summary') {
                            const creationData = creation.content.data;
                            if (Array.isArray(creationData)) {
                                note += creationData.map(data => `- ${data}`).join('\n');
                            }
                            note += '\n';
                        }
                        else {
                            const creationData = creation.content.data;
                            note += creationData;
                            note += '\n';
                        }
                    }
                    if (recording.related_notes.length > 0) {
                        note += '\n## Related Notes\n';
                        note += recording.related_notes.map(relatedNote => `- [[${this.sanitizedTitle(relatedNote.title, relatedNote.created_at)}]]`).join('\n');
                    }
                    console.debug(`Writing ${recording.recording_id} to ${recordingPath}`);
                    if (yield this.app.vault.adapter.exists(recordingPath)) {
                        yield this.app.vault.modify(this.app.vault.getFileByPath(recordingPath), note);
                    }
                    else {
                        yield this.app.vault.create(recordingPath, note);
                    }
                    this.syncedRecordingIds.push(recording.recording_id);
                    // DESTRUCTIVE action which will delete all synced recordings from server if turned on
                    // We ask twice to make sure user is doubly sure
                    if (this.settings.deleteSynced && this.settings.reallyDeleteSynced) {
                        yield this.vnApi.deleteRecording(recording.recording_id);
                    }
                }
            }
            window.clearInterval(this.syncInterval);
            if (this.settings.automaticSync) {
                console.debug(`timeSinceSync ${this.timeSinceSync} - syncTimeout: ${this.settings.syncTimeout}`);
                this.syncInterval = window.setInterval(() => {
                    this.timeSinceSync += this.ONE_SECOND;
                    if (this.timeSinceSync >= this.settings.syncTimeout * 60 * 1000) {
                        this.timeSinceSync = 0;
                        this.sync();
                    }
                }, this.ONE_SECOND);
            }
        });
    }
}

module.exports = VoiceNotesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
